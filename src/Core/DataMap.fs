namespace ARCtrl

open System.Collections.Generic
open ARCtrl.Helper 
open ARCtrl
open Fable.Core


module DataMapAux = 

    [<Literal>]
    let dataMapName = "DataMap"

    let dataHeader = CompositeHeader.Input IOType.Data

    [<Literal>]
    let dataShortHand = "Data"

    let explication = OntologyAnnotation("Clarification","NCIT","http://purl.obolibrary.org/obo/NCIT_C94778")

    [<Literal>]
    let explicationShortHand = "Explication"

    let explicationHeader = CompositeHeader.Parameter explication

    let unit = OntologyAnnotation("Unit","UO","http://purl.obolibrary.org/obo/UO_0000000")

    [<Literal>]
    let unitShortHand = "Unit"

    let unitHeader = CompositeHeader.Parameter unit

    let objectType = OntologyAnnotation("Data Type","NCIT","http://purl.obolibrary.org/obo/NCIT_C42645")

    let objectTypeHeader = CompositeHeader.Parameter objectType

    [<Literal>]
    let objectTypeShortHand = "Object Type"

    let labelHeader = CompositeHeader.FreeText "Label"

    [<Literal>]
    let labelShortHand = "Label"

    let descriptionHeader = CompositeHeader.FreeText "Description"

    [<Literal>]
    let descriptionShortHand = "Description"

    let generatedByHeader = CompositeHeader.FreeText "Generated By"

    [<Literal>]
    let generatedByShortHand = "Generated By"

    let allowedHeaders = 
        [dataHeader; explicationHeader; unitHeader; objectTypeHeader; descriptionHeader; generatedByHeader]

    let getOntologyColumn (f : DataContext -> OntologyAnnotation option) (dataContexts : ResizeArray<DataContext>) = 
        dataContexts
        |> Seq.map (fun dc -> 
            match f dc with
            | Some s -> CompositeCell.Term(s)
            | None -> CompositeCell.emptyTerm
        )
        |> ResizeArray

    let getStringColumn (f : DataContext -> string option) (dataContexts : ResizeArray<DataContext>) = 
        dataContexts
        |> Seq.map (fun dc -> 
            match f dc with
            | Some s -> CompositeCell.FreeText(s)
            | None -> CompositeCell.emptyFreeText
        )
        |> ResizeArray

    let setOntologyColumn (f : DataContext -> OntologyAnnotation option -> unit) (column : CompositeCell []) (dataContexts : ResizeArray<DataContext>) = 
        column
        |> Seq.iteri (fun i cell -> 
            match cell with
            | CompositeCell.Term s -> f (dataContexts.[i]) (Some s)
            | _ -> ()
        )

    let setStringColumn (f : DataContext -> string option -> unit) (column : CompositeCell []) (dataContexts : ResizeArray<DataContext>) =
        column
        |> Seq.iteri (fun i cell -> 
            match cell with
            | CompositeCell.FreeText s -> f (dataContexts.[i]) (Some s)
            | _ -> ()
        )

    module SanityChecks =
        
        let rowIndexInBoundaries (row : int) (dataContexts : ResizeArray<DataContext>) = 
            if row < 0 then 
                failwith "Row index must be greater or equal to 0."
            if row >= dataContexts.Count then 
                failwith "Row index must be less than the number of rows."

        let lengthOfNewColumn (newColumn : CompositeCell []) (dataContexts : ResizeArray<DataContext>) = 
            if newColumn.Length <> dataContexts.Count then
                failwith "Length of new column does not match length of data contexts."

[<AttachMembers>]
type DataMap(dataContexts : ResizeArray<DataContext>) = 
    
    let mutable staticHash = 0
    let mutable dataContexts = dataContexts

    member this.StaticHash with get() = staticHash and set(value) = staticHash <- value

    member this.DataContexts with get() = dataContexts

    static member init() = DataMap(ResizeArray())


    member this.GetExplicationColumn() =     
        DataMapAux.getOntologyColumn (fun dc -> dc.Explication) dataContexts

    member this.SetExplicationColumn(cells : CompositeCell []) = 
        DataMapAux.setOntologyColumn (fun dc oa -> dc.Explication <- oa) cells dataContexts

    member this.GetUnitColumn() = 
        DataMapAux.getOntologyColumn (fun dc -> dc.Unit) dataContexts

    member this.SetUnitColumn(cells : CompositeCell []) =   
        DataMapAux.setOntologyColumn (fun dc oa -> dc.Unit <- oa) cells dataContexts

    member this.GetObjectTypeColumn() =
        DataMapAux.getOntologyColumn (fun dc -> dc.ObjectType) dataContexts

    member this.SetDataTypeColumn(cells : CompositeCell []) =
        DataMapAux.setOntologyColumn (fun dc oa -> dc.ObjectType <- oa) cells dataContexts

    member this.GetLabelColumn() =
        DataMapAux.getStringColumn (fun dc -> dc.Name) dataContexts

    member this.SetLabelColumn(cells : CompositeCell []) =
        DataMapAux.setStringColumn (fun dc s -> dc.Name <- s) cells dataContexts

    member this.GetDescriptionColumn() =
        DataMapAux.getStringColumn (fun dc -> dc.Description) dataContexts

    member this.SetDescriptionColumn(cells : CompositeCell []) =
        DataMapAux.setStringColumn (fun dc s -> dc.Description <- s) cells dataContexts
       
    member this.GetDataContext(row: int, ?SkipValidation) = 
        DataMapAux.SanityChecks.rowIndexInBoundaries row dataContexts
        dataContexts.Item(row)

    static member getDataContext(row: int, ?SkipValidation) = 
        fun (dm : DataMap) -> dm.GetDataContext(row,?SkipValidation = SkipValidation)

    member this.Copy() =
        DataMap(
            dataContexts
            |> Seq.map (fun dc -> dc.Copy())
            |> ResizeArray
        )

    override this.Equals(obj) = 
        HashCodes.hash this = HashCodes.hash obj

    override this.GetHashCode() = 
        dataContexts
        |> HashCodes.boxHashSeq
        |> fun x -> x :?> int


    static member FileName = ARCtrl.ArcPathHelper.DataMapFileName